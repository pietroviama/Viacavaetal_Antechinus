mat.specgeodist <- dist(specgeodist, method="euclidean", diag=F, upper=F)
pcnm <- pcnm(mat.specgeodist)
sum(pcnm$values[1:10]/sum(pcnm$values[1:24]))
spat.data<-pcnm$vectors[,1:10]
array2mat <- function(array,inds,vars){
if(class(array)=="matrix"){array<-array(array,dim=c(nrow(array),ncol(array),1))}
X1 <-aperm(array,c(3,2,1))
dim(X1)<- c(inds, vars)
if(!is.null(dimnames(array)[3])){rownames(X1)<-unlist(dimnames(array)[3])}else{rownames(X1)<-c(1:nrow(X1))}
return(X1)
}
mymat<-array2mat(gpaallpop$coords,136,1236)
mainprectemp <- data.frame(gdfantepop$ppworldclim, gdfantepop$ppseasworldclim, gdfantepop$tempworldclim, gdfantepop$tempseasworldclim)
matprectemp <- as.matrix(mainprectemp)
matCsizemain <- gpaallpop$Csize
mod<-varpart(mymat,~spat.data, ~matCsizemain, ~matprectemp[,c(1:4)])
showvarparts(3, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
showvarparts(3, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
showvarparts(3, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
modclim<-varpart(mymat, ~matprectemp[,1],~matprectemp[,2],~matprectemp[,3],~matprectemp[,4])
matprectemp
matprectemp[,1]
showvarparts(4, bg = c("lightblue", "grey", "lightred", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
showvarparts(4, bg = c("lightblue", "grey", "red", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
showvarparts(4, bg = c("lightblue", "grey", "red", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
plot(modclim, bg = c("lightblue", "grey", "red", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
plot(modclim, bg = c("lightblue", "grey", "red", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
dim(gpaallpop)
dim(gdfante)
gdfante$Population
gdfantepop$Population
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclim <- rclim[[c(1,4,12,15)]]
names(rclim) <- c("Temp","TempSeas","Prec","PrecSeas")
lons <- antechinusdata$Longitude
lats <- antechinusdata$Latitude
coordsgps <- data.frame(lons, lats)
valuestemp <- raster::extract(rclim,coordsgps)
dfwtemp <- cbind.data.frame(coordsgps,valuestemp)
dfwtemp
antegps <- data.frame(antechinusdata$Latitude, antechinusdata$Longitude)
evariables <- c("el830", "el674", "el783", "el794")
retrieved.evariables <- intersect_points(antegps, evariables)
retrieved.evariables$distanceToPermanentWaterWeighted[is.na(retrieved.evariables$distanceToPermanentWaterWeighted)]<-0
retrieved.evariables$elevation[is.na(retrieved.evariables$elevation)]<-0
antechinusdata$distanceTowater <- retrieved.evariables$distanceToPermanentWaterWeighted
antechinusdata$elevation <- retrieved.evariables$elevation
antechinusdata$precseas <- retrieved.evariables$worldClimPrecipitationSeasonality
antechinusdata$tempseas <- retrieved.evariables$worldClimTemperatureSeasonality
gdfante <- geomorph.data.frame(coords = gpaall$coords, Csize = gpaall$Csize, Species = antechinusdata$Species, Population = antechinusdata$Population, ID = antechinusdata$ID, Sex = antechinusdata$Sex, Latitude = antechinusdata$Latitude, Longitude = antechinusdata$Longitude, Altitude = antechinusdata$Altitude, Dat_coll = antechinusdata$Date.collected, Collection = antechinusdata$Collection, ppworldclim = dfwtemp$Prec, ppseasworldclim = dfwtemp$PrecSeas, tempworldclim = dfwtemp$Temp, tempseasworldclim = dfwtemp$TempSeas, Age = antechinusdata$Age, doubt = antechinusdata$doubt, distanceTowater = antechinusdata$distanceTowater, elevation = antechinusdata$elevation, precseas = antechinusdata$precseas, tempseas = antechinusdata$tempseas)
specgeodist <- data.frame(gdfante$Latitude,gdfante$Longitude)
mat.specgeodist <- dist(specgeodist, method="euclidean", diag=F, upper=F)
pcnm <- pcnm(mat.specgeodist)
sum(pcnm$values[1:10]/sum(pcnm$values[1:24]))
spat.data<-pcnm$vectors[,1:10]
array2mat <- function(array,inds,vars){
if(class(array)=="matrix"){array<-array(array,dim=c(nrow(array),ncol(array),1))}
X1 <-aperm(array,c(3,2,1))
dim(X1)<- c(inds, vars)
if(!is.null(dimnames(array)[3])){rownames(X1)<-unlist(dimnames(array)[3])}else{rownames(X1)<-c(1:nrow(X1))}
return(X1)
}
mymat<-array2mat(gpaall$coords,136,1236)
dim(gpaall$coords)
mymat<-array2mat(gpaall$coords,168,1236)
mainprectemp <- data.frame(gdfante$ppworldclim, gdfante$ppseasworldclim, gdfante$tempworldclim, gdfante$tempseasworldclim)
matprectemp <- as.matrix(mainprectemp)
matCsizemain <- gpaall$Csize
mod<-varpart(mymat,~spat.data, ~matCsizemain, ~matprectemp[,c(1:4)])
showvarparts(3, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
predshapepp <- shape.predictor(gdfante$coords, x=gdfante$ppworldclim, Intercept = TRUE, predmin = min(gdfante$ppworldclim), predmax = max(gdfante$ppworldclim))
ppshapediff <- coordinates.difference(predshapepp$predmin, predshapepp$predmax, type = "spherical")
predshapepp <- shape.predictor(gdfante$coords, x=gdfante$ppworldclim, Intercept = TRUE, predmin = min(gdfante$ppworldclim), predmax = max(gdfante$ppworldclim))
ppshapediff <- coordinates.difference(predshapepp$predmin, predshapepp$predmax, type = "spherical")
procrustes.var.plot(predshapepp$predmin, predshapepp$predmax, col = list(grDevices::heat.colors, "black"), ppshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapeppseas <- shape.predictor(gdfante$coords, x=gdfante$ppseasworldclim, Intercept = TRUE, predmin = min(gdfante$ppseasworldclim), predmax = max(gdfante$ppseasworldclim))
predshapeppseas <- shape.predictor(gdfante$coords, x=gdfante$ppseasworldclim, Intercept = TRUE, predmin = min(gdfante$ppseasworldclim), predmax = max(gdfante$ppseasworldclim))
ppseasshapediff <- coordinates.difference(predshapeppseas$predmin, predshapeppseas$predmax, type = "spherical")
procrustes.var.plot(predshapeppseas$predmin, predshapeppseas$predmax, col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
which(gdfante$ppseasworldclim== max(gdfante$ppseasworldclim))
which(gdfante$ppseasworldclim== min(gdfante$ppseasworldclim))
which(gdfante$ppseasworldclim== max(gdfante$ppseasworldclim))
which(gdfante$ppseasworldclim== min(gdfante$ppseasworldclim))
procrustes.var.plot(gdfante$coords[,,which(gdfante$ppseasworldclim== min(gdfante$ppseasworldclim))], gdfante$coords[,,which(gdfante$ppseasworldclim== max(gdfante$ppseasworldclim))], col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
procrustes.var.plot(gpaall$coords[,,which(gdfante$ppseasworldclim== min(gdfante$ppseasworldclim))], gpaall$coords[,,which(gdfante$ppseasworldclim== max(gdfante$ppseasworldclim))], col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
?procrustes.var.plot
gpaall$coords[,,which(gdfante$ppseasworldclim== max(gdfante$ppseasworldclim))]
procrustes.var.plot(gpaall$coords[,,which(gdfante$ppseasworldclim== min(gdfante$ppseasworldclim))], gpaall$coords[,,which(gdfante$ppseasworldclim== max(gdfante$ppseasworldclim))], col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapetemp <- shape.predictor(gdfante$coords, x=gdfante$tempworldclim, Intercept = TRUE, predmin = min(gdfante$tempworldclim), predmax = max(gdfante$tempworldclim))
tempshapediff <- coordinates.difference(predshapetemp$predmin, predshapetemp$predmax, type = "spherical")
procrustes.var.plot(predshapetemp$predmin, predshapetemp$predmax, col = list(grDevices::heat.colors, "black"), tempshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapetempseas <- shape.predictor(gdfante$coords, x=gdfante$tempseasworldclim, Intercept = TRUE, predmin = min(gdfante$tempseasworldclim), predmax = max(gdfante$tempseasworldclim))
tempseasshapediff <- coordinates.difference(predshapetempseas$predmin, predshapetempseas$predmax, type = "spherical")
procrustes.var.plot(predshapetempseas$predmin, predshapetempseas$predmax, col = list(grDevices::heat.colors, "black"), tempseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapeelevation <- shape.predictor(gdfante$coords, x=gdfante$elevationworldclim, Intercept = TRUE, predmin = min(gdfante$elevationworldclim), predmax = max(gdfante$elevationworldclim))
elevationshapediff <- coordinates.difference(predshapeelevation$predmin, predshapeelevation$predmax, type = "spherical")
predshapetemp <- shape.predictor(gdfante$coords, x=gdfante$tempworldclim, Intercept = TRUE, predmin = min(gdfante$tempworldclim), predmax = max(gdfante$tempworldclim))
predshapeelevation <- shape.predictor(gdfante$coords, x=gdfante$elevationworldclim, Intercept = TRUE, predmin = min(gdfante$elevationworldclim), predmax = max(gdfante$elevationworldclim))
predshapeelevation <- shape.predictor(gdfante$coords, x=gdfante$elevation, Intercept = TRUE, predmin = min(gdfante$elevation), predmax = max(gdfante$elevation))
elevationshapediff <- coordinates.difference(predshapeelevation$predmin, predshapeelevation$predmax, type = "spherical")
procrustes.var.plot(predshapeelevation$predmin, predshapeelevation$predmax, col = list(grDevices::heat.colors, "black"), elevationshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapedistanceTowater <- shape.predictor(gdfante$coords, x=gdfante$distanceTowater, Intercept = TRUE, predmin = min(gdfante$distanceTowater), predmax = max(gdfante$distanceTowater))
distanceTowatershapediff <- coordinates.difference(predshapedistanceTowater$predmin, predshapedistanceTowater$predmax, type = "spherical")
procrustes.var.plot(predshapedistanceTowater$predmin, predshapedistanceTowater$predmax, col = list(grDevices::heat.colors, "black"), distanceTowatershapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapelongitude <- shape.predictor(gdfante$coords, x=gdfante$longitude, Intercept = TRUE, predmin = min(gdfante$longitude), predmax = max(gdfante$longitude))
predshapeLongitude <- shape.predictor(gdfante$coords, x=gdfante$Longitude, Intercept = TRUE, predmin = min(gdfante$Longitude), predmax = max(gdfante$Longitude))
Longitudeshapediff <- coordinates.difference(predshapeLongitude$predmin, predshapeLongitude$predmax, type = "spherical")
procrustes.var.plot(predshapeLongitude$predmin, predshapeLongitude$predmax, col = list(grDevices::heat.colors, "black"), Longitudeshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapeLatitude <- shape.predictor(gdfante$coords, x=gdfante$Latitude, Intercept = TRUE, predmin = min(gdfante$Latitude), predmax = max(gdfante$Latitude))
Latitudeshapediff <- coordinates.difference(predshapeLatitude$predmin, predshapeLatitude$predmax, type = "spherical")
procrustes.var.plot(predshapeLatitude$predmin, predshapeLatitude$predmax, col = list(grDevices::heat.colors, "black"), Latitudeshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapeLongitude <- shape.predictor(gdfante$coords, x=gdfante$Longitude, Intercept = TRUE, predmin = min(gdfante$Longitude), predmax = max(gdfante$Longitude))
Longitudeshapediff <- coordinates.difference(predshapeLongitude$predmin, predshapeLongitude$predmax, type = "spherical")
procrustes.var.plot(predshapeLongitude$predmin, predshapeLongitude$predmax, col = list(grDevices::heat.colors, "black"), Longitudeshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
full_rda<-vegan::rda(mymat~spat.data+matprectemp[,c(1:4)]+matCsizemain)### full model
geo.rda<-vegan::rda(mymat~spat.data+Condition(matprectemp[,c(1:4)])+Condition(matCsizemain))### fraction variance of the variable
clim.rda.shape<-vegan::rda(mymat~matprectemp[,c(1:4)]+Condition(spat.data)+Condition(matCsizemain))
size.rda.shape<-vegan::rda(mymat~matCsizemain+Condition(spat.data)+Condition(matprectemp[,c(1:4)]))
anova(full_rda)
RsquareAdj(full_rda)
anova(geo.rda)
RsquareAdj(geo.rda)
anova(clim.rda.shape)
RsquareAdj(clim.rda.shape)
anova(size.rda.shape)
RsquareAdj(size.rda.shape)
Eclim<-vegan::rda(mymat~matprectemp[,c(1:2)])
anova(Eclim)
RsquareAdj(Eclim)
Eclim<-vegan::rda(mymat~matprectemp[,c(1:4)])
anova(Eclim)
RsquareAdj(Eclim)
Egeo<-vegan::rda(mymat~spat.data)
anova(Egeo)
RsquareAdj(Egeo)
Ecsize<-vegan::rda(mymat~matCsizemain)
anova(Ecsize)
RsquareAdj(Ecsize)
modclim<-varpart(mymat, ~matprectemp[,1],~matprectemp[,2],~matprectemp[,3],~matprectemp[,4])
showvarparts(4, bg = c("lightblue", "grey", "red", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
plot(modclim, bg = c("lightblue", "grey", "red", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
plot(modclim, bg = c("lightblue", "grey", "red", "yellow"), Xnames=c("Precipitation","Precipitation seasonality","Temperature", "Temperature seasonality"), cex = 2, id.size = 2)
library(ggplot2)
library(ggmap)
library(maps)
range(antechinusdata$Longitude, na.rm = TRUE, finite = TRUE)
range(antechinusdata$Latitude, na.rm = TRUE, finite = TRUE)
base = get_map(location=c(145,-37,155,-25), zoom=7, maptype="terrain-background")
map1 = ggmap(base)
map1
map2 <-
map1+
geom_point(data=antechinusdata,
aes(x=Longitude, y=Latitude, fill = Population, shape = Population), color="white", cex=6) +
scale_fill_manual(values = c("grey", "red", "blue", "darkgreen"), labels=c("?", "stuartii north", "stuartii south", "subtropicus"), name=NULL) +
scale_shape_manual(values = c(25,24,23,21,22,21), labels=c("?", "stuartii north", "stuartii south", "stuartii neotype", "subtropicus", "subtropicus holotype"), name=NULL) + # define shape/color scales
labs(x="Longitude", y="Latitude", title="Antechinus distribution map") + # label the axes
theme_bw() + theme(legend.position="bottom", axis.text = element_text(size = rel(0.75)), legend.key = element_rect(colour = "white"), axis.text.x = element_text(angle=45, vjust=0.5)) # tweak the plot's appearance and legend position
map2
map2
predshapeppseas <- shape.predictor(gdfante$coords, x=gdfante$ppseasworldclim, Intercept = TRUE, predmin = min(gdfante$ppseasworldclim), predmax = max(gdfante$ppseasworldclim))
ppseasshapediff <- coordinates.difference(predshapeppseas$predmin, predshapeppseas$predmax, type = "spherical")
procrustes.var.plot(predshapeppseas$predmin, predshapeppseas$predmax, col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapetemp <- shape.predictor(gdfante$coords, x=gdfante$tempworldclim, Intercept = TRUE, predmin = min(gdfante$tempworldclim), predmax = max(gdfante$tempworldclim))
tempshapediff <- coordinates.difference(predshapetemp$predmin, predshapetemp$predmax, type = "spherical")
procrustes.var.plot(predshapetemp$predmin, predshapetemp$predmax, col = list(grDevices::heat.colors, "black"), tempshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapesize <- shape.predictor(gpaallpop$coords, x=gpaallpop$Csize, Intercept = TRUE, predmin = min(gpaallpop$Csize), predmax = max(gpaallpop$Csize))
allomshapediff <- coordinates.difference(predshapesize$predmin, predshapesize$predmax, type = "spherical")
procrustes.var.plot(predshapesize$predmin, predshapesize$predmax, col = list(grDevices::heat.colors, "black"), allomshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
procrustes.var.plot(predshapesize$predmin, predshapesize$predmax, col = list(grDevices::heat.colors, "black"), allomshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
library(scholar)
install.packages("scholar")
install.packages("scholar")
library(scholar)
?compare_scholars
get_publications(viAJZzUAAAAJ&hl)
get_publications("viAJZzUAAAAJ&hl")
get_publications("f4_n_WQAAAAJ&hl")
compare_scholars("f4_n_WQAAAAJ&hl", "viAJZzUAAAAJ&hl")
t <- compare_scholars("f4_n_WQAAAAJ&hl", "viAJZzUAAAAJ&hl")
t
compare_scholar_careers("f4_n_WQAAAAJ&hl", "viAJZzUAAAAJ&hl")
compare_scholar_careers("f4_n_WQAAAAJ&hl", "viAJZzUAAAAJ&hl", career = TRUE)
ids<-c("f4_n_WQAAAAJ&hl", "viAJZzUAAAAJ&hl")
df<-compare_scholar_careers(ids)
df
get_article_cite_history("viAJZzUAAAAJ&hl")
get_article_cite_history("viAJZzUAAAAJ&hl","2147702660143858910")
get_article_cite_history("viAJZzUAAAAJ&hl","u5HHmVD_uO8C")
id<-c("viAJZzUAAAAJ&hl")
get_citation_history(id)
get_coauthors(id)
get_num_articles(id)
get_num_distinct_journals(id)
get_num_top_journals(id)
get_profile(id)
predict_h_index(id)
predict_h_index("f4_n_WQAAAAJ&hl")
predict_h_index("id"4UxbBYIAAAAJ)
predict_h_index("4UxbBYIAAAAJ")
knitr::opts_knit$set(root.dir = '../Viacavaetal_Antechinus/Data', echo = TRUE)
#load libraries
library(ggplot2)
library(digest)
library(rgl)
library(geomorph)
library(vegan) # vegan version 2.4-4
library(Morpho)
library(ape)
library(raster)
library(sp)
library(MASS)
library(RColorBrewer)
library(shapes)
library(ALA4R)
library(ggsignif)
library(ggpubr)
if(!require(devtools)) install.packages("devtools")
library(devtools)
devtools::install_github("TGuillerme/landvR")
library(landvR)
fitshapelat<-procD.lm(gdfante$coords~Latitude, data = gdfantepop, effect.type = "F")
fitshapelat<-procD.lm(gdfantepop$coords~Latitude, data = gdfantepop, effect.type = "F")
summary(fitshapelat)
fitshapelat<-procD.lm(gdfante$coords~Latitude, data = gdfantepop, effect.type = "F")
fitshapelat<-procD.lm(gdfante$coords~Latitude, data = gdfante, effect.type = "F")
summary(fitshapelat)
fitshapelon<-procD.lm(gdfantepop$coords~Longitude, data = gdfantepop, effect.type = "F")
summary(fitshapelon)
gdfante$Population
fitshapelon<-procD.lm(gdfante$coords~Longitude, data = gdfante, effect.type = "F")
summary(fitshapelon)
lmsizelat<- procD.lm(Csize~Latitude, data = gdfantepop, iter = 999, effect.type = "F")
summary(lmsizelat)
lmsizelat<- procD.lm(Csize~Latitude, data = gdfante, iter = 999, effect.type = "F")
summary(lmsizelat)
lmsizelon<- procD.lm(Csize~Longitude, data = gdfantepop, iter = 999, effect.type = "F")
summary(lmsizelon)
lmsizelon<- procD.lm(Csize~Longitude, data = gdfante, iter = 999, effect.type = "F")
summary(lmsizelon)
#separate pops and do gpas on them
gpasouth<-gpagen(A_reorder[,,c(which(antechinusdata$Population=="south"))], curves = NULL, surfaces = NULL, PrinAxes = TRUE, max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
antesouthlat <- antechinusdata$Latitude[c(which(antechinusdata$Population=="south"))]
antesouthlon <- antechinusdata$Longitude[c(which(antechinusdata$Population=="south"))]
gpanorth<-gpagen(A_reorder[,,c(which(antechinusdata$Population=="north"))], curves = NULL, surfaces = NULL, PrinAxes = TRUE, max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
antenorthlat <- antechinusdata$Latitude[c(which(antechinusdata$Population=="north"))]
antenorthlon <- antechinusdata$Longitude[c(which(antechinusdata$Population=="north"))]
gpasub<-gpagen(A_reorder[,,c(which(antechinusdata$Population=="subtropicus"))], curves = NULL, surfaces = NULL, PrinAxes = TRUE, max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
antesublat <- antechinusdata$Latitude[c(which(antechinusdata$Population=="subtropicus"))]
antesublon <- antechinusdata$Longitude[c(which(antechinusdata$Population=="subtropicus"))]
fitshapesouthlat<-procD.lm(gpasouth$coords~antesouthlat, effect.type = "F")
summary(fitshapesouthlat)
procrustes.var.plot(gpaallpop$coords[,,which(gpaallpop$Csize== min(gpaallpop$Csize))], gpaallpop$coords[,,which(gpaallpop$Csize== max(gpaallpop$Csize))], col = list(grDevices::heat.colors, "black"), allomshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
procrustes.var.plot(gpaallpop$coords[,,which(gpaallpop$Csize== min(gpaallpop$Csize))], gpaallpop$coords[,,which(gpaallpop$Csize== max(gpaallpop$Csize))], col = list(grDevices::heat.colors, "black"), allomshapediff[[1]][,"radius"], col.range = c(0, 0.02), pt.size = 0.5)
procrustes.var.plot(gpaallpop$coords[,,which(gpaallpop$Csize== min(gpaallpop$Csize))], gpaallpop$coords[,,which(gpaallpop$Csize== max(gpaallpop$Csize))], col = list(grDevices::heat.colors, "black"), allomshapediff[[1]][,"radius"], col.range = c(0, 0.01), pt.size = 0.5)
ppseasshapediff <- coordinates.difference(predshapeppseas$predmin, predshapeppseas$predmax, type = "spherical")
procrustes.var.plot(predshapeppseas$predmin, predshapeppseas$predmax, col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapetemp <- shape.predictor(gdfante$coords, x=gdfante$tempworldclim, Intercept = TRUE, predmin = min(gdfante$tempworldclim), predmax = max(gdfante$tempworldclim))
tempshapediff <- coordinates.difference(predshapetemp$predmin, predshapetemp$predmax, type = "spherical")
procrustes.var.plot(predshapetemp$predmin, predshapetemp$predmax, col = list(grDevices::heat.colors, "black"), tempshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
?procD.lm
knitr::opts_knit$set(root.dir = '../Viacavaetal_Antechinus/Data', echo = TRUE)
#load libraries
library(ggplot2)
library(digest)
library(rgl)
library(geomorph)
library(vegan) # vegan version 2.4-4
library(Morpho)
library(ape)
library(raster)
library(sp)
library(MASS)
library(RColorBrewer)
library(shapes)
library(ALA4R)
library(ggsignif)
library(ggpubr)
if(!require(devtools)) install.packages("devtools")
library(devtools)
devtools::install_github("TGuillerme/landvR")
library(landvR)
PWpop.sum <- summary(PWpop, test.type = "dist", confidence = 0.95, stat.table = FALSE)
#Import 3D coordinates from all specimens
coords.3D <- t (read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_semiLMcoords.csv", header = TRUE, row.names = 1))
dim(coords.3D)
#Convert 2D metadata into a 3D array
A <- arrayspecs(coords.3D, 412, 3)
dim(A)
Ahead <- head(dimnames(A))[3]
#Load the classifier
antechinusdata <- read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_data.csv", header=T)
dim(antechinusdata)
Data.species <- antechinusdata$Species
is.factor(Data.species) # check that it is a factor
#give museum ID row names to quolls data
rownames(antechinusdata)<-antechinusdata$ID
####Rearrange coordinate names and classifier file names in the same order
names_array <- dimnames(A)[[3]]
names_classifier <- rownames(antechinusdata)
match(names_array, names_classifier)
A_reorder <- A[,,match(names_classifier, names_array)]
names_Areorder <- dimnames(A_reorder)[[3]]
match(names_Areorder, names_classifier)
#CLEANED VERY ROUGHLY, RECHECK SPECIMENS THAT CAN BE INCLUDED IN THE ANALYSIS
A_reorder <- A_reorder[,,-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642"))]
antechinusdata <- antechinusdata[-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642")),]
antechinusdata <- droplevels(antechinusdata)
#####DO THAT######
gpaall<-gpagen(A_reorder, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
#include precipitation and temperature data from worldclim
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclim <- rclim[[c(1,4,12,15)]]
names(rclim) <- c("Temp","TempSeas","Prec","PrecSeas")
lons <- antechinusdata$Longitude
lats <- antechinusdata$Latitude
coordsgps <- data.frame(lons, lats)
valuestemp <- raster::extract(rclim,coordsgps)
dfwtemp <- cbind.data.frame(coordsgps,valuestemp)
dfwtemp
antegps <- data.frame(antechinusdata$Latitude, antechinusdata$Longitude)
evariables <- c("el830", "el674", "el783", "el794")
retrieved.evariables <- intersect_points(antegps, evariables)
retrieved.evariables$distanceToPermanentWaterWeighted[is.na(retrieved.evariables$distanceToPermanentWaterWeighted)]<-0
retrieved.evariables$elevation[is.na(retrieved.evariables$elevation)]<-0
antechinusdata$distanceTowater <- retrieved.evariables$distanceToPermanentWaterWeighted
antechinusdata$elevation <- retrieved.evariables$elevation
antechinusdata$precseas <- retrieved.evariables$worldClimPrecipitationSeasonality
antechinusdata$tempseas <- retrieved.evariables$worldClimTemperatureSeasonality
#frame data for geomorph
gdfante <- geomorph.data.frame(coords = gpaall$coords, Csize = gpaall$Csize, Species = antechinusdata$Species, Population = antechinusdata$Population, ID = antechinusdata$ID, Sex = antechinusdata$Sex, Latitude = antechinusdata$Latitude, Longitude = antechinusdata$Longitude, Altitude = antechinusdata$Altitude, Dat_coll = antechinusdata$Date.collected, Collection = antechinusdata$Collection, ppworldclim = dfwtemp$Prec, ppseasworldclim = dfwtemp$PrecSeas, tempworldclim = dfwtemp$Temp, tempseasworldclim = dfwtemp$TempSeas, Age = antechinusdata$Age, doubt = antechinusdata$doubt, distanceTowater = antechinusdata$distanceTowater, elevation = antechinusdata$elevation, precseas = antechinusdata$precseas, tempseas = antechinusdata$tempseas)
A_reorderpop <- A_reorder[,,-c(which(antechinusdata$Population=="?"), which(antechinusdata$Population=="subtropicus holotype"))]
antechinusdatapop <- antechinusdata[-c(which(antechinusdata$Population=="?"), which(antechinusdata$Population=="subtropicus holotype")),]
antechinusdatapop <- droplevels(antechinusdatapop)
gpaallpop<-gpagen(A_reorderpop, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
gpaallpop<-gpagen(A_reorderpop, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclimpop <- rclim[[c(1,4,12,15)]]
names(rclimpop) <- c("Temp","TempSeas","Prec","PrecSeas")
lonspop <- antechinusdatapop$Longitude
latspop <- antechinusdatapop$Latitude
coordsgpspop <- data.frame(lonspop, latspop)
valuestemppop <- raster::extract(rclimpop,coordsgpspop)
dfwtemppop <- cbind.data.frame(coordsgpspop,valuestemppop)
dfwtemppop
antegps <- data.frame(antechinusdatapop$Latitude, antechinusdatapop$Longitude)
evariables <- c("el830", "el674", "el783", "el794")
retrieved.evariables <- intersect_points(antegps, evariables)
retrieved.evariables$distanceToPermanentWaterWeighted[is.na(retrieved.evariables$distanceToPermanentWaterWeighted)]<-0
retrieved.evariables$elevation[is.na(retrieved.evariables$elevation)]<-0
antechinusdatapop$distanceTowater <- retrieved.evariables$distanceToPermanentWaterWeighted
antechinusdatapop$elevation <- retrieved.evariables$elevation
antechinusdatapop$precseas <- retrieved.evariables$worldClimPrecipitationSeasonality
antechinusdatapop$tempseas <- retrieved.evariables$worldClimTemperatureSeasonality
gdfantepop <- geomorph.data.frame(coords = gpaallpop$coords, Csize = gpaallpop$Csize, Species = antechinusdatapop$Species, Population = antechinusdatapop$Population, ID = antechinusdatapop$ID, Sex = antechinusdatapop$Sex, Latitude = antechinusdatapop$Latitude, Longitude = antechinusdatapop$Longitude, Altitude = antechinusdatapop$Altitude, Dat_coll = antechinusdatapop$Date.collected, Collection = antechinusdatapop$Collection, ppworldclim = dfwtemppop$Prec, ppseasworldclim = dfwtemppop$PrecSeas, tempworldclim = dfwtemppop$Temp, tempseasworldclim = dfwtemppop$TempSeas, Age = antechinusdatapop$Age, doubt = antechinusdatapop$doubt, distanceTowater = antechinusdatapop$distanceTowater, elevation = antechinusdatapop$elevation, precseas = antechinusdatapop$precseas, tempseas = antechinusdatapop$tempseas)
PCAantepop <- plotTangentSpace(gdfantepop$coords, warpgrids = FALSE, mesh = FALSE, groups = gdfantepop$Population, legend = gdfantepop$Population, label = gdfantepop$ID)
northcoords <- gdfantepop$coords[,,which(gdfantepop$Population=="north")]
mshapenorth <- mshape(northcoords)
southcoords <- gdfantepop$coords[,,which(gdfantepop$Population=="south")]
mshapesouth <- mshape(southcoords)
subtropicuscoords <- gdfantepop$coords[,,which(gdfantepop$Population=="subtropicus")]
mshapesubtropicus <- mshape(subtropicuscoords)
#warp south vs north
tps3dsouthnorth <- tps3d(G34.ply, A_reorder[,,which(antechinusdata$ID=="G34")], mshapesouth)
mshapesouthnorth <- coordinates.difference(mshapesouth, mshapenorth, type = "spherical")
mshapenorthsubtropicus <- coordinates.difference(mshapenorth, mshapesubtropicus, type = "spherical")
mshapesouthsubtropicus <- coordinates.difference(mshapesouth, mshapesubtropicus, type = "spherical")
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
procrustes.var.plot(mshapenorth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapenorthsubtropicus[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthsubtropicus[[1]][,"radius"])
procrustes.var.plot(mshapenorth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapenorthsubtropicus[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
predshapesize <- shape.predictor(gpaallpop$coords, x=gpaallpop$Csize, Intercept = TRUE, predmin = min(gpaallpop$Csize), predmax = max(gpaallpop$Csize))
allomshapediff <- coordinates.difference(predshapesize$predmin, predshapesize$predmax, type = "spherical")
procrustes.var.plot(predshapesize$predmin, predshapesize$predmax, col = list(grDevices::heat.colors, "black"), allomshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapeppseas <- shape.predictor(gdfante$coords, x=gdfante$ppseasworldclim, Intercept = TRUE, predmin = min(gdfante$ppseasworldclim), predmax = max(gdfante$ppseasworldclim))
ppseasshapediff <- coordinates.difference(predshapeppseas$predmin, predshapeppseas$predmax, type = "spherical")
procrustes.var.plot(predshapeppseas$predmin, predshapeppseas$predmax, col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
procrustes.var.plot(mshapenorth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapenorthsubtropicus[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthsubtropicus[[1]][,"radius"])
predshapeppseas <- shape.predictor(gdfante$coords, x=gdfante$ppseasworldclim, Intercept = TRUE, predmin = min(gdfante$ppseasworldclim), predmax = max(gdfante$ppseasworldclim))
ppseasshapediff <- coordinates.difference(predshapeppseas$predmin, predshapeppseas$predmax, type = "spherical")
procrustes.var.plot(predshapeppseas$predmin, predshapeppseas$predmax, col = list(grDevices::heat.colors, "black"), ppseasshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
predshapetemp <- shape.predictor(gdfante$coords, x=gdfante$tempworldclim, Intercept = TRUE, predmin = min(gdfante$tempworldclim), predmax = max(gdfante$tempworldclim))
tempshapediff <- coordinates.difference(predshapetemp$predmin, predshapetemp$predmax, type = "spherical")
procrustes.var.plot(predshapetemp$predmin, predshapetemp$predmax, col = list(grDevices::heat.colors, "black"), tempshapediff[[1]][,"radius"], col.range = c(0, 0.015), pt.size = 0.5)
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
procrustes.var.plot(mshapenorth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapenorthsubtropicus[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthsubtropicus[[1]][,"radius"])
knitr::opts_knit$set(root.dir = '../Viacavaetal_Antechinus/Data', echo = TRUE)
#load libraries
library(ggplot2)
library(digest)
library(rgl)
library(geomorph)
library(vegan) # vegan version 2.4-4
library(Morpho)
library(ape)
library(raster)
library(sp)
library(MASS)
library(RColorBrewer)
library(shapes)
library(ALA4R)
library(ggsignif)
library(ggpubr)
if(!require(devtools)) install.packages("devtools")
library(devtools)
devtools::install_github("TGuillerme/landvR")
library(landvR)
#Import 3D coordinates from all specimens
coords.3D <- t (read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_semiLMcoords.csv", header = TRUE, row.names = 1))
dim(coords.3D)
#Convert 2D metadata into a 3D array
A <- arrayspecs(coords.3D, 412, 3)
dim(A)
Ahead <- head(dimnames(A))[3]
#Load the classifier
antechinusdata <- read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_data.csv", header=T)
dim(antechinusdata)
Data.species <- antechinusdata$Species
is.factor(Data.species) # check that it is a factor
#give museum ID row names to quolls data
rownames(antechinusdata)<-antechinusdata$ID
####Rearrange coordinate names and classifier file names in the same order
names_array <- dimnames(A)[[3]]
names_classifier <- rownames(antechinusdata)
match(names_array, names_classifier)
A_reorder <- A[,,match(names_classifier, names_array)]
names_Areorder <- dimnames(A_reorder)[[3]]
match(names_Areorder, names_classifier)
#CLEANED VERY ROUGHLY, RECHECK SPECIMENS THAT CAN BE INCLUDED IN THE ANALYSIS
A_reorder <- A_reorder[,,-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642"))]
antechinusdata <- antechinusdata[-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642")),]
antechinusdata <- droplevels(antechinusdata)
#####DO THAT######
gpaall<-gpagen(A_reorder, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
#include precipitation and temperature data from worldclim
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclim <- rclim[[c(1,4,12,15)]]
names(rclim) <- c("Temp","TempSeas","Prec","PrecSeas")
lons <- antechinusdata$Longitude
lats <- antechinusdata$Latitude
coordsgps <- data.frame(lons, lats)
valuestemp <- raster::extract(rclim,coordsgps)
dfwtemp <- cbind.data.frame(coordsgps,valuestemp)
dfwtemp
antegps <- data.frame(antechinusdata$Latitude, antechinusdata$Longitude)
evariables <- c("el830", "el674", "el783", "el794")
retrieved.evariables <- intersect_points(antegps, evariables)
antegps <- data.frame(antechinusdata$Latitude, antechinusdata$Longitude)
evariables <- c("el830", "el674", "el783", "el794")
retrieved.evariables <- intersect_points(antegps, evariables)
setwd("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Analysis")
#Import 3D coordinates from all specimens
coords.3D <- t (read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_semiLMcoords.csv", header = TRUE, row.names = 1))
dim(coords.3D)
#Convert 2D metadata into a 3D array
A <- arrayspecs(coords.3D, 412, 3)
dim(A)
Ahead <- head(dimnames(A))[3]
#Load the classifier
antechinusdata <- read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_data.csv", header=T)
dim(antechinusdata)
Data.species <- antechinusdata$Species
is.factor(Data.species) # check that it is a factor
#give museum ID row names to quolls data
rownames(antechinusdata)<-antechinusdata$ID
####Rearrange coordinate names and classifier file names in the same order
names_array <- dimnames(A)[[3]]
names_classifier <- rownames(antechinusdata)
match(names_array, names_classifier)
A_reorder <- A[,,match(names_classifier, names_array)]
names_Areorder <- dimnames(A_reorder)[[3]]
match(names_Areorder, names_classifier)
#CLEANED VERY ROUGHLY, RECHECK SPECIMENS THAT CAN BE INCLUDED IN THE ANALYSIS
A_reorder <- A_reorder[,,-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642"))]
antechinusdata <- antechinusdata[-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642")),]
antechinusdata <- droplevels(antechinusdata)
#####DO THAT######
gpaall<-gpagen(A_reorder, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
#include precipitation and temperature data from worldclim
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclim <- rclim[[c(1,4,12,15)]]
names(rclim) <- c("Temp","TempSeas","Prec","PrecSeas")
lons <- antechinusdata$Longitude
lats <- antechinusdata$Latitude
coordsgps <- data.frame(lons, lats)
valuestemp <- raster::extract(rclim,coordsgps)
dfwtemp <- cbind.data.frame(coordsgps,valuestemp)
dfwtemp
antegps <- data.frame(antechinusdata$Latitude, antechinusdata$Longitude)
evariables <- c("el830", "el674", "el783", "el794")
retrieved.evariables <- intersect_points(antegps, evariables)
retrieved.evariables$distanceToPermanentWaterWeighted[is.na(retrieved.evariables$distanceToPermanentWaterWeighted)]<-0
evariables <- c("el830", "el674", "el783", "el794")
retrieved.evariables <- intersect_points(antegps, evariables)
?intersec
