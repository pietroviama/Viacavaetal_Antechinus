#Load the classifier
antechinusdata <- read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_data.csv", header=T)
dim(antechinusdata)
Data.species <- antechinusdata$Species
is.factor(Data.species) # check that it is a factor
#give museum ID row names to quolls data
rownames(antechinusdata)<-antechinusdata$ID
names_array <- dimnames(A)[[3]]
names_classifier <- rownames(antechinusdata)
match(names_array, names_classifier)
A_reorder <- A[,,match(names_classifier, names_array)]
names_Areorder <- dimnames(A_reorder)[[3]]
match(names_Areorder, names_classifier)
#CLEANED VERY ROUGHLY, RECHECK SPECIMENS THAT CAN BE INCLUDED IN THE ANALYSIS
A_reorder <- A_reorder[,,-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642"))]
antechinusdata <- antechinusdata[-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642")),]
antechinusdata <- droplevels(antechinusdata)
gpaall<-gpagen(A_reorder, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclim <- rclim[[c(1,12)]]
names(rclim) <- c("Temp","Prec")
lons <- antechinusdata$Longitude
lats <- antechinusdata$Latitude
coordsgps <- data.frame(lons, lats)
valuestemp <- extract(rclim,coordsgps)
knitr::opts_knit$set(root.dir = '../Viacavaetal_Antechinus/Data', echo = TRUE)
#load libraries
library(ggplot2)
library(digest)
library(rgl)
library(geomorph)
library(vegan) # vegan version 2.4-4
library(Morpho)
library(ape)
library(raster)
library(sp)
library(MASS)
library(RColorBrewer)
library(shapes)
library(ALA4R)
library(ggsignif)
if(!require(devtools)) install.packages("devtools")
library(devtools)
devtools::install_github("TGuillerme/landvR")
library(landvR)
#Import 3D coordinates from all specimens
coords.3D <- t (read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_LMcoords.csv", header = TRUE, row.names = 1))
dim(coords.3D)
#Convert 2D metadata into a 3D array
A <- arrayspecs(coords.3D, 82, 3)
dim(A)
Ahead <- head(dimnames(A))[3]
#Load the classifier
antechinusdata <- read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_data.csv", header=T)
dim(antechinusdata)
Data.species <- antechinusdata$Species
is.factor(Data.species) # check that it is a factor
#give museum ID row names to quolls data
rownames(antechinusdata)<-antechinusdata$ID
####Rearrange coordinate names and classifier file names in the same order
names_array <- dimnames(A)[[3]]
names_classifier <- rownames(antechinusdata)
match(names_array, names_classifier)
A_reorder <- A[,,match(names_classifier, names_array)]
names_Areorder <- dimnames(A_reorder)[[3]]
match(names_Areorder, names_classifier)
#CLEANED VERY ROUGHLY, RECHECK SPECIMENS THAT CAN BE INCLUDED IN THE ANALYSIS
A_reorder <- A_reorder[,,-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642"))]
antechinusdata <- antechinusdata[-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642")),]
antechinusdata <- droplevels(antechinusdata)
#####DO THAT######
gpaall<-gpagen(A_reorder, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
#include precipitation and temperature data from worldclim
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclim <- rclim[[c(1,12)]]
names(rclim) <- c("Temp","Prec")
lons <- antechinusdata$Longitude
lats <- antechinusdata$Latitude
coordsgps <- data.frame(lons, lats)
valuestemp <- extract(rclim,coordsgps)
dfwtemp <- cbind.data.frame(coordsgps,valuestemp)
dfwtemp
#frame data for geomorph
gdfante <- geomorph.data.frame(gpaall, Species = antechinusdata$Species, Population = antechinusdata$Population, ID = antechinusdata$ID, Sex = antechinusdata$Sex, Latitude = antechinusdata$Latitude, Longitude = antechinusdata$Longitude, Altitude = antechinusdata$Altitude, Dat_coll = antechinusdata$Date.collected, Collection = antechinusdata$Collection,
tempworldclim = dfwtemp$Prec, tempworldclim = dfwtemp$Temp, Age = antechinusdata$Age, doubt = antechinusdata$doubt)
gdfante$Latitude
#PCA for all specimens
PCAante <- plotTangentSpace(gdfante$coords, warpgrids = FALSE, mesh = FALSE, groups = gdfante$Population, legend = gdfante$ID, label = gdfante$ID)
summary(PCAante)
cols<-brewer.pal(n=5,name="Set1")
cols_dat<-cols[gdfante$Population]
PCAanteplot <- plot(PCAante$pc.scores[,1], PCAante$pc.scores[,2], col = cols_dat, pch = c(16:18)[factor(gdfante$Sex)], cex = 2, asp = T, xlab="Principal Component 1 (19.68%)", ylab="Principal Component 2 (8.55%)")
#text(PCAante$pc.scores[,1], PCAante$pc.scores[,2], labels=gdfante$ID, pos=4)
#need to correct legend
#legend(0.04, 0.02, legend=paste(rep(c("Female","Male","unknown"), times=2), rep(c("subtropicus","stuartii south", "stuartii north"), each=2), sep=","), col = rep(cols_dat, times=2), pch=rep(c(16:17), each=2), bty="n",ncol=2,cex=1.5,pt.cex=1.5, x.intersp = 0.2, text.width = 0.01)
#ggplot PCA (nicer)
Population <- gdfante$Population
Sex <- gdfante$Sex
dataPCA <- data.frame(PCAante$pc.scores[,1], PCAante$pc.scores[,2], Population, Sex)
plotPCA <- ggplot(dataPCA, aes(x=PCAante.pc.scores...1., y=PCAante.pc.scores...2., colour = Population, shape = Sex)) +
labs(x = "PC 1 (19.68%)", y = "PC 2 (8.55%)") +
scale_color_manual(values = c("grey", "red", "blue", "darkgreen", "orange")) +
geom_point(size = 8, alpha = 0.8) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.text = element_text(size = 25), legend.title = element_text(size = 25), axis.title.x = element_text(size = 25), axis.title.y = element_text(size = 25), axis.text = element_text(size = 20), legend.justification = "center")
plot(plotPCA)
#Sex analysis
A_reordersex <- A_reorder[,,-which(antechinusdata$Sex=="Unknown")]
antechinusdatasex <- antechinusdata[-which(antechinusdata$Sex=="Unknown"),]
antechinusdatasex <- droplevels(antechinusdatasex)
gpaallsex<-gpagen(A_reordersex, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
gdfantesex <- geomorph.data.frame(gpaallsex, Species = antechinusdatasex$Species, Population = antechinusdatasex$Population, ID = antechinusdatasex$ID, Sex = antechinusdatasex$Sex, Latitude = antechinusdatasex$Latitude, Longitude = antechinusdatasex$Longitude, Altitude = antechinusdatasex$Altitude, Dat_coll = antechinusdatasex$Date.collected, Collection = antechinusdatasex$Collection, doubt = antechinusdatasex$doubt)
#PCA sex
PCAantesex <- plotTangentSpace(gdfantesex$coords, warpgrids = FALSE, mesh = FALSE, groups = gdfantesex$Sex)
summary(PCAantesex)
Sex <- gdfantesex$Sex
dataPCAsex <- data.frame(PCAantesex$pc.scores[,1], PCAantesex$pc.scores[,2], Sex)
plotPCAsex <- ggplot(dataPCAsex, aes(x=PCAantesex.pc.scores...1., y=PCAantesex.pc.scores...2., colour = Sex, shape = Sex)) +
labs(x = "PC 1 (19.9%)", y = "PC 2 (8.4%)") +
scale_color_manual(values = c("yellow4", "purple4")) +
geom_point(size = 8, alpha = 0.8) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.text = element_text(size = 25), legend.title = element_text(size = 25), axis.title.x = element_text(size = 25), axis.title.y = element_text(size = 25), axis.text = element_text(size = 20), legend.justification = "center")
plot(plotPCAsex)
#Are sexes different in shape?
fit.shapesex <- procD.lm(coords~Sex, data = gdfantesex, effect.type = "F")
summary(fit.shapesex)
#yes
#Is there a common allometry or are there unique allometries across sexes?
fit.sex.uni <- procD.lm(f1 = coords~Csize*Sex, data = gdfantesex, effect.type = "F")
summary(fit.sex.uni)
#common allometric relationship
#Are there shape differences between sexes after correcting for size?
fit.sex <- procD.lm(f1 = coords~Csize+Sex, data = gdfantesex, effect.type = "F")
summary(fit.sex)
#Are sexes different in Centroid Size (proxy for size)? (Table 1)
lmsizesex <- lm(gdfantesex$Csize~gdfantesex$Sex)
anova(lmsizesex)
summary(lmsizesex)
#sex boxplot
df.antesex <- data.frame(gdfantesex$Csize, gdfantesex$Sex)
Sexbplot <- ggplot(df.antesex,
aes(x = gdfantesex.Sex,
y = gdfantesex.Csize,
fill = gdfantesex.Sex)) +
scale_fill_manual(values = c("yellow4", "purple4")) +
labs(x= NULL, y= "Centroid Size",
title= NULL) +
geom_boxplot() +
geom_point() +
theme_classic() +
theme(legend.position = "none", axis.text.x = element_text(size = 25), axis.text.y = element_text(size = 15), axis.title.y = element_text(size=25))
plot(Sexbplot)
#exclude dubious population identities
#(RECHECK SPECIMENS THAT CAN STILL BE INCLUDED IN THE ANALYSIS (ANDREW COULD HELP))
A_reorderpop <- A_reorder[,,-c(which(antechinusdata$Population=="?"), which(antechinusdata$Population=="subtropicus holotype"))]
antechinusdatapop <- antechinusdata[-c(which(antechinusdata$Population=="?"), which(antechinusdata$Population=="subtropicus holotype")),]
antechinusdatapop <- droplevels(antechinusdatapop)
gpaallpop<-gpagen(A_reorderpop, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
#include precipitation and temperature data from worldclim
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclimpop <- rclim[[c(1,12)]]
names(rclimpop) <- c("Temp","Prec")
lonspop <- antechinusdatapop$Longitude
latspop <- antechinusdatapop$Latitude
coordsgpspop <- data.frame(lonspop, latspop)
valuestemppop <- extract(rclimpop,coordsgpspop)
dfwtemppop <- cbind.data.frame(coordsgpspop,valuestemppop)
dfwtemppop
antegps <- data.frame(antechinusdatapop$Latitude, antechinusdatapop$Longitude)
evariables <- c("el830", "el674")
retrieved.evariables <- intersect_points(antegps, evariables)
retrieved.evariables$distanceToPermanentWaterWeighted[is.na(retrieved.evariables$distanceToPermanentWaterWeighted)]<-0
retrieved.evariables$elevation[is.na(retrieved.evariables$elevation)]<-0
antechinusdatapop$distanceTowater <- retrieved.evariables$distanceToPermanentWaterWeighted
antechinusdatapop$elevation <- retrieved.evariables$elevation
#frame data for geomorph
gdfantepop <- geomorph.data.frame(coords = gpaallpop$coords, Csize = gpaallpop$Csize, Species = antechinusdatapop$Species, Population = antechinusdatapop$Population, ID = antechinusdatapop$ID, Sex = antechinusdatapop$Sex, Latitude = antechinusdatapop$Latitude, Longitude = antechinusdatapop$Longitude, Altitude = antechinusdatapop$Altitude, Dat_coll = antechinusdatapop$Date.collected, Collection = antechinusdatapop$Collection,
ppworldclim = dfwtemppop$Prec, tempworldclim = dfwtemppop$Temp, Age = antechinusdatapop$Age, doubt = antechinusdatapop$doubt, distanceTowater = antechinusdatapop$distanceTowater, elevation = antechinusdatapop$elevation)
PCAantepop <- plotTangentSpace(gdfantepop$coords, warpgrids = TRUE, mesh = TRUE, groups = gdfantepop$Population, legend = gdfantepop$Population)
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclimpop <- rclim[[c(1,12)]]
names(rclimpop) <- c("Temp","Prec")
lonspop <- antechinusdatapop$Longitude
latspop <- antechinusdatapop$Latitude
coordsgpspop <- data.frame(lonspop, latspop)
valuestemppop <- extract(rclimpop,coordsgpspop)
dfwtemppop <- cbind.data.frame(coordsgpspop,valuestemppop)
dfwtemppop
antegps <- data.frame(antechinusdatapop$Latitude, antechinusdatapop$Longitude)
evariables <- c("el830", "el674")
retrieved.evariables <- intersect_points(antegps, evariables)
retrieved.evariables$distanceToPermanentWaterWeighted[is.na(retrieved.evariables$distanceToPermanentWaterWeighted)]<-0
retrieved.evariables$elevation[is.na(retrieved.evariables$elevation)]<-0
antechinusdatapop$distanceTowater <- retrieved.evariables$distanceToPermanentWaterWeighted
antechinusdatapop$elevation <- retrieved.evariables$elevation
gdfantepop <- geomorph.data.frame(coords = gpaallpop$coords, Csize = gpaallpop$Csize, Species = antechinusdatapop$Species, Population = antechinusdatapop$Population, ID = antechinusdatapop$ID, Sex = antechinusdatapop$Sex, Latitude = antechinusdatapop$Latitude, Longitude = antechinusdatapop$Longitude, Altitude = antechinusdatapop$Altitude, Dat_coll = antechinusdatapop$Date.collected, Collection = antechinusdatapop$Collection,
ppworldclim = dfwtemppop$Prec, tempworldclim = dfwtemppop$Temp, Age = antechinusdatapop$Age, doubt = antechinusdatapop$doubt, distanceTowater = antechinusdatapop$distanceTowater, elevation = antechinusdatapop$elevation)
specgeodist <- data.frame(gdfantepop$Latitude,gdfantepop$Longitude)
specgeodist
mat.specgeodist <- dist(specgeodist, method="euclidean", diag=F, upper=F)
mat.specgeodist
?pcnm
sum(pcnm$values[1:10]/sum(pcnm$values[1:24]))
specgeodist <- data.frame(gdfantepop$Latitude,gdfantepop$Longitude)
mat.specgeodist <- dist(specgeodist, method="euclidean", diag=F, upper=F)
pcnm <- pcnm(mat.specgeodist)
sum(pcnm$values[1:10]/sum(pcnm$values[1:24]))
spat.data<-pcnm$vectors[,1:10]
array2mat <- function(array,inds,vars){
if(class(array)=="matrix"){array<-array(array,dim=c(nrow(array),ncol(array),1))}
X1 <-aperm(array,c(3,2,1))
dim(X1)<- c(inds, vars)
if(!is.null(dimnames(array)[3])){rownames(X1)<-unlist(dimnames(array)[3])}else{rownames(X1)<-c(1:nrow(X1))}
return(X1)
}
mymat<-array2mat(gpa$coords,89,2700)
mymat<-array2mat(gpaallpop$coords,89,2700)
dim(gpaallpop$coords)
82*3
mymat<-array2mat(gpaallpop$coords,129,246)
mainprectemp <- data.frame(gdfantepop$ppworldclim, gdfantepop$tempworldclim/10)
matprectemp <- as.matrix(mainprectemp)
matCsizemain <- gpaallpop$Csize
mod<-varpart(mymat,~spat.data, ~matCsizemain, ~matprectemp[,c(1:2)])
showvarparts(3, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
full_rda<-vegan::rda(mymat~spat.data+matprectemp[,c(1:2)]+matCsizemain)### full model
full_rda<-vegan::rda(mymat~spat.data+matprectemp[,c(1:2)]+matCsizemain)### full model
geo.rda<-vegan::rda(mymat~spat.data+Condition(matprectemp[,c(1:2)])+Condition(matCsizemain))### fraction variance of the variable
clim.rda.shape<-vegan::rda(mymat~matprectemp[,c(1:2)]+Condition(spat.data)+Condition(matCsizemain))
size.rda.shape<-vegan::rda(mymat~matCsizemain+Condition(spat.data)+Condition(matprectemp[,c(1:2)]))
anova(full_rda)
anova(geo.rda)
anova(clim.rda.shape)
anova(clim.rda.shape)
RsquareAdj(clim.rda.shape)
anova(size.rda.shape)
RsquareAdj(size.rda.shape)
Eclim<-vegan::rda(mymat~matprectemp[,c(1:2)])
anova(Eclim)
RsquareAdj(Eclim)
Egeo<-vegan::rda(mymat~spat.data)
anova(Egeo)
RsquareAdj(Egeo)
Ecsize<-vegan::rda(mymat~matCsizemain)
anova(Ecsize)
RsquareAdj(Ecsize)
RsquareAdj(geo.rda)
anova(full_rda)
RsquareAdj(full_rda)
mymat
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
anova(geo.rda)
RsquareAdj(geo.rda)
plot(mod, bg = c("blue", "red", "black"), Xnames=c("Geography","Size","Climate"), cex = 2, id.size = 2)
?write.csv
specgeodist
mymat
write.csv(specgeodist, file = "C:/Users/pietro/Desktop/Pietro")
write.csv(specgeodist, file = "C:/Users/pietro/Desktop/Pietro/geodist")
write.csv(gpaallpop$coords, file = "C:/Users/pietro/Desktop/Pietro/shapedata")
write.csv(gpaallpop$Csize, file = "C:/Users/pietro/Desktop/Pietro/csizedata")
write.csv(mainprectemp, file = "C:/Users/pietro/Desktop/Pietro/prectemp")
prueba<- read.csv("C:/Users/pietro/Desktop/Pietro/geodist)
prueba<- read.csv("C:/Users/pietro/Desktop/Pietro/geodist")
prueba<- read.csv("C:/Users/pietro/Desktop/Pietro/specgeodist")
prueba
prueba<- read.csv("C:/Users/pietro/Desktop/Pietro/shapedata")
prueba
prueba1<-array2mat(prueba, 129, 246)
prueba<- read.csv("C:/Users/pietro/Desktop/Pietro/prectemp")
prueba
attributes(coords.3D)
class(coords.3D)
prueba2 <- t(read.csv("C:/Users/pietro/Desktop/Pietro/shapedata"))
prueba2
class(prueba3)
class(prueba2)
prueba2 <- t(read.csv("C:/Users/pietro/Desktop/Pietro/shapedata"), header = TRUE, row.names=1)
#Import 3D coordinates from all specimens
coords.3D <- t (read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_LMcoords.csv", header = TRUE, row.names = 1))
prueba2 <- t(read.csv("C:/Users/pietro/Desktop/Pietro/shapedata", header = TRUE, row.names=1))
prueba2
knitr::opts_knit$set(root.dir = '../Viacavaetal_Antechinus/Data', echo = TRUE)
#load libraries
library(ggplot2)
library(digest)
library(rgl)
library(geomorph)
library(vegan) # vegan version 2.4-4
library(Morpho)
library(ape)
library(raster)
library(sp)
library(MASS)
library(RColorBrewer)
library(shapes)
library(ALA4R)
library(ggsignif)
if(!require(devtools)) install.packages("devtools")
library(devtools)
devtools::install_github("TGuillerme/landvR")
library(landvR)
#Import 3D coordinates from all specimens
coords.3D <- t (read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_LMcoords.csv", header = TRUE, row.names = 1))
dim(coords.3D)
#Convert 2D metadata into a 3D array
A <- arrayspecs(coords.3D, 82, 3)
dim(A)
Ahead <- head(dimnames(A))[3]
#Load the classifier
antechinusdata <- read.csv("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_data.csv", header=T)
dim(antechinusdata)
Data.species <- antechinusdata$Species
is.factor(Data.species) # check that it is a factor
#give museum ID row names to quolls data
rownames(antechinusdata)<-antechinusdata$ID
####Rearrange coordinate names and classifier file names in the same order
names_array <- dimnames(A)[[3]]
names_classifier <- rownames(antechinusdata)
match(names_array, names_classifier)
A_reorder <- A[,,match(names_classifier, names_array)]
names_Areorder <- dimnames(A_reorder)[[3]]
match(names_Areorder, names_classifier)
#CLEANED VERY ROUGHLY, RECHECK SPECIMENS THAT CAN BE INCLUDED IN THE ANALYSIS
A_reorder <- A_reorder[,,-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642"))]
antechinusdata <- antechinusdata[-c(which(antechinusdata$Age=="Juvenile?"), which(antechinusdata$Population=="adustus?"), which(antechinusdata$Population=="agilis?"), which(antechinusdata$ID=="CM3642")),]
antechinusdata <- droplevels(antechinusdata)
#####DO THAT######
gpaall<-gpagen(A_reorder, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
#include precipitation and temperature data from worldclim
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclim <- rclim[[c(1,12)]]
names(rclim) <- c("Temp","Prec")
lons <- antechinusdata$Longitude
lats <- antechinusdata$Latitude
coordsgps <- data.frame(lons, lats)
valuestemp <- extract(rclim,coordsgps)
dfwtemp <- cbind.data.frame(coordsgps,valuestemp)
dfwtemp
#frame data for geomorph
gdfante <- geomorph.data.frame(gpaall, Species = antechinusdata$Species, Population = antechinusdata$Population, ID = antechinusdata$ID, Sex = antechinusdata$Sex, Latitude = antechinusdata$Latitude, Longitude = antechinusdata$Longitude, Altitude = antechinusdata$Altitude, Dat_coll = antechinusdata$Date.collected, Collection = antechinusdata$Collection,
tempworldclim = dfwtemp$Prec, tempworldclim = dfwtemp$Temp, Age = antechinusdata$Age, doubt = antechinusdata$doubt)
A_reorderpop <- A_reorder[,,-c(which(antechinusdata$Population=="?"), which(antechinusdata$Population=="subtropicus holotype"))]
antechinusdatapop <- antechinusdata[-c(which(antechinusdata$Population=="?"), which(antechinusdata$Population=="subtropicus holotype")),]
antechinusdatapop <- droplevels(antechinusdatapop)
gpaallpop<-gpagen(A_reorderpop, curves = NULL, surfaces = NULL, PrinAxes = TRUE,
max.iter = NULL, ProcD = TRUE, Proj = TRUE, print.progress = TRUE)
rclim<- getData("worldclim",var="bio",res=10) #run in console
rclimpop <- rclim[[c(1,12)]]
names(rclimpop) <- c("Temp","Prec")
lonspop <- antechinusdatapop$Longitude
latspop <- antechinusdatapop$Latitude
coordsgpspop <- data.frame(lonspop, latspop)
valuestemppop <- extract(rclimpop,coordsgpspop)
dfwtemppop <- cbind.data.frame(coordsgpspop,valuestemppop)
dfwtemppop
antegps <- data.frame(antechinusdatapop$Latitude, antechinusdatapop$Longitude)
evariables <- c("el830", "el674")
retrieved.evariables <- intersect_points(antegps, evariables)
retrieved.evariables$distanceToPermanentWaterWeighted[is.na(retrieved.evariables$distanceToPermanentWaterWeighted)]<-0
retrieved.evariables$elevation[is.na(retrieved.evariables$elevation)]<-0
antechinusdatapop$distanceTowater <- retrieved.evariables$distanceToPermanentWaterWeighted
antechinusdatapop$elevation <- retrieved.evariables$elevation
gdfantepop <- geomorph.data.frame(coords = gpaallpop$coords, Csize = gpaallpop$Csize, Species = antechinusdatapop$Species, Population = antechinusdatapop$Population, ID = antechinusdatapop$ID, Sex = antechinusdatapop$Sex, Latitude = antechinusdatapop$Latitude, Longitude = antechinusdatapop$Longitude, Altitude = antechinusdatapop$Altitude, Dat_coll = antechinusdatapop$Date.collected, Collection = antechinusdatapop$Collection,
ppworldclim = dfwtemppop$Prec, tempworldclim = dfwtemppop$Temp, Age = antechinusdatapop$Age, doubt = antechinusdatapop$doubt, distanceTowater = antechinusdatapop$distanceTowater, elevation = antechinusdatapop$elevation)
northcoords <- gdfantepop$coords[,,which(gdfantepop$Population=="north")]
mshapenorth <- mshape(northcoords)
southcoords <- gdfantepop$coords[,,which(gdfantepop$Population=="south")]
mshapesouth <- mshape(southcoords)
subtropicuscoords <- gdfantepop$coords[,,which(gdfantepop$Population=="subtropicus")]
mshapesubtropicus <- mshape(subtropicuscoords)
mshapenorthsubtropicus <- coordinates.difference(mshapenorth, mshapesubtropicus, type = "spherical")
mshapesouthsubtropicus <- coordinates.difference(mshapesouth, mshapesubtropicus, type = "spherical")
mshapenorthsouth <- coordinates.difference(mshapenorth, mshapesouth, type = "spherical")
mshapesouthnorth <- coordinates.difference(mshapesouth, mshapenorth, type = "spherical")
mshapenorthsubtropicus <- coordinates.difference(mshapenorth, mshapesubtropicus, type = "spherical")
mshapesouthsubtropicus <- coordinates.difference(mshapesouth, mshapesubtropicus, type = "spherical")
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
mshapesouthnorth <- coordinates.difference(mshapesouth, mshapenorth, type = "spherical")
mshapenorthsubtropicus <- coordinates.difference(mshapenorth, mshapesubtropicus, type = "spherical")
mshapesouthsubtropicus <- coordinates.difference(mshapesouth, mshapesubtropicus, type = "spherical")
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.5, col.val = mshapesouthnorth[[1]][,"radius"])
rgl.viewpoint(180, -90, fov = 0, zoom = 0.5)
rgl.viewpoint(90, -90, fov = 0, zoom = 0.5)
rgl.viewpoint(90, 0, fov = 0, zoom = 0.5)
rgl.viewpoint(-90, 0, fov = 0, zoom = 0.5)
rgl.viewpoint(-90, 90, fov = 0, zoom = 0.5)
rgl.viewpoint(90, 90, fov = 0, zoom = 0.5)
rgl.viewpoint(-180, 90, fov = 0, zoom = 0.5)
rgl.viewpoint(0, 0, fov = 0, zoom = 0.5)
rgl.viewpoint(0, 0, fov = 0, zoom = 0.5)
rgl.viewpoint(0, 90, fov = 0, zoom = 0.5)
rgl.viewpoint(90, 0, fov = 0, zoom = 0.5)
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 0.7, col.val = mshapesouthnorth[[1]][,"radius"])
rgl.viewpoint(90, 90, fov = 0, zoom = 0.5)
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 1, col.val = mshapesouthnorth[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapenorth, col = list(grDevices::heat.colors, "black"), pt.size = 1, col.val = mshapesouthnorth[[1]][,"radius"])
procrustes.var.plot(mshapenorth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 1, col.val = mshapenorthsubtropicus[[1]][,"radius"])
procrustes.var.plot(mshapesouth, mshapesubtropicus, col = list(grDevices::heat.colors, "black"), pt.size = 1, col.val = mshapesouthsubtropicus[[1]][,"radius"])
knitr::opts_knit$set(root.dir = '../Viacavaetal_Antechinus/Data', echo = TRUE)
library(Morpho)
library(rgl)
library(Rvcg)
library(geomorph)
library(abind)
## import template mesh and landmark set
subtropicus.holo<-file2mesh('C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels/J17407.ply',readcol=F,clean=T)
subtropicus.p<-(read.csv('C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Templatecoords.csv', header = F))
dim(subtropicus.p)
rownames(subtropicus.p)<-subtropicus.p$V1
subtropicus.p1 <- subtropicus.p[,-1]
dim(subtropicus.p1) #412 landmarks, 3 dimensions
#reordering landmarks: curves first, patches second and curves last
template.pf <- subtropicus.p1[1:82,]
template.pc <- subtropicus.p1[83:267,]
template.pp <- subtropicus.p1[268:412,]
template.p <- rbind(template.pf, template.pc, template.pp)
template.p1 <- template.p[-c(83,96,131:138,152:153,158:163,167:168,173:182,232:233,244:247),]
#VW trying to get this into an array - first turn each column into a vector
V2 <-template.p1$V2
V3 <-template.p1$V3
V4 <- template.p1$V4
template_array <- array(c(V2, V3, V4), dim = c(376, 3, 1))
#plot landmarks on mesh to check if they correspond well
shade3d(subtropicus.holo,col = 8)
spheres3d(template_array[1:82,,],radius = 0.2,col = 1)#fixed. nb of landmarks = (  z-1)/3  82
spheres3d(template_array[83:231,,],radius = 0.1,col = 2) #curves 185
spheres3d(template_array[232:376,,],radius = 0.1,col = 3) #patches 145
text3d(template_array[1:376,,], texts = c(1:376), asp = FALSE, cex = 1, col="blue", pos = 3) #plot number of landmarks to check ordering
#import landmark sets for all specimens
LMcoords <- t(read.csv('C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/Antechinus_LMcoords.csv', header = T, row.names = 1))
dim(LMcoords)
Ants <- arrayspecs(LMcoords, 82, 3) #convert into array
dim(Ants)
Ahead <- head(dimnames(Ants))[3]
# specify fixed landmarks of template specimen in a matrix
fixed<-as.matrix(template_array[c(1:82),,])
# specify semilandmarks of template specimen in a matrix
patch<-as.matrix(template_array[c(83:376),,])
rownames(patch)<-c(1:294)
#Atlas creation
Atlas<-createAtlas(subtropicus.holo,landmarks = fixed, patch = patch, patchCurves = list(c(1:3, c(4:6), c(7:9), c(10:12), c(13:20), c(21:23), c(24:26), c(27:29), c(30:32), c(33:36), c(37:40), c(41:43), c(44:46), c(47:51), c(52:56), c(57:59), c(60:63), c(64:66), c(67:70), c(71:75), c(76:78), c(79:81), c(82:85), c(86:89), c(90:93), c(94:97), c(98:100), c(101:103), c(104:106), c(107:111), c(112:114), c(115:119), c(120:124), c(125:129), c(130:132), c(133:135), c(136:138), c(139:146), c(147:149), c(150:294))))
#Atlas plot
cols<-c("black","red","green","blue")
plotAtlas(Atlas, pt.size=0.2, point = "s", legend = TRUE, cols = cols)
#CHECK THIS: CURVES ONLY ON ATLAS BUT NO PATCH SEMILMS
knitr::opts_knit$set(root.dir = 'Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels/', echo = TRUE)
#Folder with all meshes
Folder <- "../Data/3Dmodels/AntechinusAll3Dmodels"
#Navigate to folder with the subsample of ply files
Plylist <- sub(".ply", "", list.files(Folder))
#extract the coordinates that correspond to the ply files - note the dimnames and the ply file names need to be identical
#match ply file names with data names and reorder
match(Plylist, dimnames(Ants)[[3]])
Plylist==dimnames(Ants)[[3]]
data_reorder<-Ants[, , match(Plylist, dimnames(Ants)[[3]])]
names_reorder<-dimnames(data_reorder)[[3]]
match(names_reorder, Plylist)
dimnames(data_reorder)[[3]] == Plylist
setwd("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels/") #does not work with Rmd, run separately
nma<-list.files(path="../Data/3Dmodels/AntechinusAll3Dmodels")
listo<-do.call(list,lapply(nma,function(x) file2mesh(x,readcol=F,clean=T)))
#semilandmark placement in all specimenes
lmplacement<-placePatch(Atlas, data_reorder, path="../Data/3Dmodels/AntechinusAll3Dmodels/", inflate=0.5) # use ray=TRUE for projection along surface normals instead of closest point???
#check good placement of semilandmarks in all specimens
checkLM(lmplacement, path = "../Data/3Dmodels/AntechinusAll3Dmodels/", atlas=Atlas, point = "s", pt.size = 0.2)
names_reorder<-dimnames(data_reorder)[[3]]
match(names_reorder, Plylist)
dimnames(data_reorder)[[3]] == Plylist
setwd("C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels/") #does not work with Rmd, run separately
nma<-list.files(path="../Data/3Dmodels/AntechinusAll3Dmodels")
nma<-list.files(path="C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels")
listo<-do.call(list,lapply(nma,function(x) file2mesh(x,readcol=F,clean=T)))
dimnames(data_reorder)[[3]] == Plylist
knitr::opts_knit$set(root.dir = 'Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels/', echo = TRUE)
#Folder with all meshes
Folder <- "../Data/3Dmodels/AntechinusAll3Dmodels"
#Navigate to folder with the subsample of ply files
Plylist <- sub(".ply", "", list.files(Folder))
Plylist
match(Plylist, dimnames(Ants)[[3]])
Plylist==dimnames(Ants)[[3]]
data_reorder<-Ants[, , match(Plylist, dimnames(Ants)[[3]])]
names_reorder<-dimnames(data_reorder)[[3]]
match(names_reorder, Plylist)
dimnames(data_reorder)[[3]] == Plylist
nma<-list.files(path="C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels")
listo<-do.call(list,lapply(nma,function(x) file2mesh(x,readcol=F,clean=T)))
nma
listo<-do.call(Plylist,lapply(nma,function(x) file2mesh(x,readcol=F,clean=T)))
nma<-list.files(path="C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels")
listo<-do.call(Plylist,lapply(nma,function(x) file2mesh(x,readcol=F,clean=T)))
Plylist
listo<-do.call(list,lapply(nma,function(x) file2mesh(x,readcol=F,clean=T)))
list()
list
lmplacement<-placePatch(Atlas, data_reorder, path="C:/Users/pietro/Desktop/Pietro/Projects/Viacavaetal_Antechinus/Data/3Dmodels/AntechinusAll3Dmodels/", inflate=0.5) # use ray=TRUE for projection along surface normals instead of closest point???
#check good placement of semilandmarks in all specimens
checkLM(lmplacement, path = "../Data/3Dmodels/AntechinusAll3Dmodels/", atlas=Atlas, point = "s", pt.size = 0.2)
provo<-placePatch(Atlas,data_reorder,path="../Data/3Dmodels/AntechinusAll3Dmodels/",
inflate=0.5)
#check good placement of semilandmarks in all specimens
checkLM(lmplacement, path = "../Data/3Dmodels/AntechinusAll3Dmodels/", atlas=Atlas, point = "s", pt.size = 0.2)
